name: Frontend - Build and Deploy

on:
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy the image after build?'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  id-token: write   # REQUIRED for OIDC authentication
  contents: read    # needed so checkout can read repo code

env:
  AWS_ACCOUNT_ID: 648378716943
  AWS_REGION: eu-west-2
  APP_NAME: notes-app-serverless
  ARTEFACTS_BUCKET: notes-app-serverless-artefacts-648378716943
  CODE_DEPLOY_APP_NAME: notes-app-serverless-frontend
  CODE_DEPLOY_DEPLOYMENT_GROUP: notes-app-serverless-frontend-bluegreen-dg
  COMMIT_HASH: ${{ github.sha }}
  IMAGE_NAME: notes-app-serverless-frontend
  TASK_DEFINITION_NAME: notes-app-serverless-frontend

jobs:
  check-build:
    name: Check build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Install dependencies
        run: npm ci

      - name: Run build
        run: npm run build

  build-docker-image:
    name: Build docker image
    runs-on: ubuntu-latest
    needs: [check-build]
    outputs:
      short_sha: ${{ steps.vars.outputs.short_sha }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Set short SHA as env variable
        id: vars
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.short_sha }}
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest

  deploy-to-ecs:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: [build-docker-image]
    if: ${{ github.event.inputs.deploy == 'true' }}

    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ASSUME_ROLE }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get current task definition JSON
      run: aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION_NAME }} > taskdef.json

    - name: Update image version in task definition
      run: |
        IMAGE_URI="${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ needs.build-docker-image.outputs.short_sha }}"
        jq --arg img "$IMAGE_URI" \
          '.taskDefinition.containerDefinitions[0].image = $img' taskdef.json > updated-taskdef.json
        jq '.taskDefinition
        | del(
          .taskDefinitionArn,
          .revision,
          .status,
          .requiresAttributes,
          .compatibilities,
          .registeredAt,
          .registeredBy
        )' updated-taskdef.json > register-taskdef.json

    - name: Register new task definition revision
      id: register
      run: |
        aws ecs register-task-definition --cli-input-json file://register-taskdef.json > registered.json
        NEW_TASK_DEF_ARN=$(jq -r '.taskDefinition.taskDefinitionArn' registered.json)
        echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

    - name: Create appspec.yaml
      run: |
        cat <<EOF > appspec.yaml
        version: 1
        Resources:
          - TargetService:
              Type: AWS::ECS::Service
              Properties:
                TaskDefinition: ${{ env.NEW_TASK_DEF_ARN }}
                LoadBalancerInfo:
                  ContainerName: "frontend"
                  ContainerPort: 80
                PlatformVersion: "LATEST"
        EOF

    - name: Zip deployment files
      run: zip frontend-deployment-${{ github.sha }}.zip appspec.yaml

    - name: Upload appsepec to s3
      run: aws s3 cp frontend-deployment-${{ github.sha }}.zip s3://${{ env.ARTEFACTS_BUCKET}}/codedeploy/${{ env.APP_NAME }}/frontend-deployment-${{ github.sha }}.zip
        
    - name: Deploy to CodeDeploy
      run: |
        DEPLOYMENT_ID=$(aws deploy create-deployment \
          --application-name ${{ env.CODE_DEPLOY_APP_NAME }} \
          --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP }} \
          --s3-location bucket=${{ env.ARTEFACTS_BUCKET }},key=codedeploy/${{ env.APP_NAME }}/frontend-deployment-${{ github.sha }}.zip,bundleType=zip \
          --description "Deploy from GitHub Actions" \
          --query "deploymentId" --output text)

        echo "Deployment ID: $DEPLOYMENT_ID"

        # Wait for deployment to complete successfully
        aws deploy wait deployment-successful --deployment-id $DEPLOYMENT_ID

        echo "Deployment completed successfully!"
